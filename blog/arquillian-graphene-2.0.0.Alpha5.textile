---
date: 2013-09-03
author: jhuska, lfryc
---

The last step from Beta release brings you a lot of new life hacks. We would like to show you:

<br/>

h3(highlights). Highlighted Changes

- <i class="icon-star"></i> Guard Improvements and Fixes := 
@RequestGuard@ interface was implemented, which enables you to filter out requests which guards will intercept.
=:

- <i class="icon-star"></i> Support for parallel browsers sessions := 
Graphene context is no more thread-local. This enables parallel browser sessions, in other words two different browser sessions in one test. ("an example here":#parallel-browsers)
=:

- <i class="icon-star"></i> Page Objects can encapsulate their location := 
You can easily denote Page Object's location, via @@Location@ annotation. When used with @@InitialPage@ annotation as a test parameter, Graphene will load that location as a first action of the test, and also will give you initialized page object. ("an example here":#page-objects-location)
=:

- <i class="icon-star"></i> Injecting elements from HTML frames/iframes := 
A feature request from the community, to facilitate the tedious process of switching to and back from a particular frame/iframe. Now you can just use @@InFrame@ annotation to specify in which frame the element should be located. ("an example here":#elements-from-frames)
=:

- <i class="icon-star"></i> Page Fragments implementing @WebElement@ interface := 
A way to give to your Page Fragments all the methods from the @WebElement@ interface, without need to implement them. Graphene will delegate all @WebElement@ methods invocations to the page fragment's root.
=:

- <i class="icon-star"></i> Drone enrichers for Page Fragments and Page Objects := 
It is now possible to inject objects into your Page Fragments and Page Objects via standard Arquillian annotations: e.g. @@Drone@ for the browser instance.
=:

- <i class="icon-star"></i> Introduction of the @GrapheneElement@ := 
It is our way how to add missing methods to the @WebElement@ interface. @GrapheneElement@ can be used everywhere where @WebElement@ is used. Currently its only addition is @isPresent@ method, but we plan far more.
=:

- <i class="icon-star"></i> Drone upgraded to 1.2.0.Alpha3 := 
For more info, please see the Drone release annoucement "here.":http://arquillian.org/blog/2013/08/17/arquillian-extension-drone-1-2-0-Alpha3/
=:

h4. Removed

- <i class="icon-star"></i> @Graphene.guardXhr()@ := 
@Graphene.guardXhr()@ were removed, use @Graphene.guardAjax()@ instead.
=:

h4. Deprecations (will be removed in Beta1)

- <i class="icon-star"></i> Our implementation of @@FindBy@ annotation := 
To achieve better extendability and to avoid errors caused by mistyped package name, we decided to deprecate our implementation of the @@FindBy@. ("read more":https://community.jboss.org/thread/232112)
=:

h3(#parallel-browsers). Parallel browser sessions

p. Your test can now use more than one browser session. It might be handy for testing e.g. server push functionality. Consider following:

bc(prettify).. @Browser1 
@Drone
private WebDriver browser1;

@Browser2
@Drone
private WebDriver browser2;

public void testServerPushFromFirefoxToChromeAfterRegistration() {
    browser1.get(“http://localhost:8080/myApp”);
    browser2.get(“http://localhost:8080/myApp”);

    formFragment.registerUser(new User(“John”), browser1);
    registeredUsers.assertContains(“John”, browser2);
}

p. @@Browser1@ and @@Browser2@ annotations are qualifiers, similar concept as in the CDI. The settings for these browsers can be set e.g. in the @arquillian.xml@:

bc(prettify).. <extension qualifier="webdriver-browser1">
  <property name="browserCapabilities">firefox</property>
</extension>
<extension qualifier="webdriver-browser2">
  <property name="browserCapabilities">chrome</property>
</extension>

h3(#page-objects-location). Page Objects' location encapsulated

p. First thing you have to keep in mind before interacting with the page is its loading in the browser. Once the URL of the particular page changes, you will have to change it on several places in your tests.

p. Graphene, therefore, encapsulates page’s location, and provides a way how to load the page automatically on a correct context root, before the test execution.

p. Consider following snippet:

bc(pretiffy).. @Location("register-page.html")
public class RegisterPage {
    //implementation of the page object goes here
}

@Test
public void testRegisterPage(@InitialPage RegisterPage page) {
   //Graphene automatically load MyPageObject location in the browser
   page.getInput().sendKeys(“Blah foo”);
   page.submit();
   assertFalse(page.isSubmitted());
}

p. You can also leverage @Graphene.goTo(RegisterPage.class)@ method, which will use the @@Location@ annotation value to load the correct page in the browser.

h3(#elements-from-frames). Elements from frames/iframes

p. If you find working with frames/iframes tedious using @WebDriver@ API, we have some good news for you. Graphene is able to specify in which frame/iframe an element reside. Consider following snippet:

bc(pretiffy).. @Page
@InFrame(index = 0)
private PageObject page;

@FindBy(id = "foo-bar")
@InFrame(nameOrId = "second")
private PageFragment myFragment;

p. You can specify the frame either by its index or its @nameOrId@ strategy. Graphene will automatically switche to the coresponding frame when interacting with such an page object and switches back after the interaction.

h4. Roadmap

p. We have already introduced all features for Graphene 2.0.

p. Beta1 release will follow in few days which will bring you some more goodies:

* Arquillian guide
* finished reference documentation
* online JavaDoc documentation for Graphene API
* removal of deprecated APIs
* stabilization
* usual portion of bug fixes

p. Be sure to remove deprecated APIs in order to stay compatible with upcoming Graphene 2.0 releases.